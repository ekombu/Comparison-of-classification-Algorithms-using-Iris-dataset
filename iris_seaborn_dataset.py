# -*- coding: utf-8 -*-
"""Iris_Seaborn_Dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lmZSh4iJaSle4SKU4ViOV__qe1L-RTza

Objectives: To predict the flower species

DATA PREPROCESSING

Import libraries and dataset
"""

import pandas as pd
import numpy as np
import seaborn as sns

"""Check dataset in seaborn and load iris"""

sns.get_dataset_names()

df=sns.load_dataset('iris')

"""Explore the data"""

df.head()

df.shape

df.species.unique()

df.info()

df.dtypes

df.isna().sum()

df.describe()

df['species'].value_counts()

df['species'].value_counts().plot(kind='bar')

"""Get the target and features"""

X=df.iloc[:,0:-1].values
y=df.iloc[:,-1].values

"""Split the data into train and test"""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)

"""Transform the data"""

from sklearn.preprocessing import StandardScaler

trans=StandardScaler()

X_train=trans.fit_transform(X_train)
X_test=trans.transform(X_test)

"""MODELLING"""



"""LOGISTIC REGRESSION"""

from sklearn.linear_model import LogisticRegression

lmodel=LogisticRegression()

lmodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=lmodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""KTH NEAREST NEIGHBOURS

Build the model
"""

from sklearn.neighbors import KNeighborsClassifier

kmodel=KNeighborsClassifier(n_neighbors=11,p=2,metric='euclidean')

kmodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=kmodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""NAIVE BAYES"""

from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB,CategoricalNB,ComplementNB

nmodel=GaussianNB() #Not depend on transformation

nmodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=nmodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""DECISION TREE"""

from sklearn.tree import DecisionTreeClassifier

dmodel=DecisionTreeClassifier(criterion='gini',
                             max_depth=7,
                             min_samples_split=9,
                             random_state=10)

dmodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=dmodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""SUPPORT VECTOR MACHINE"""

from sklearn.svm import SVC

smodel=SVC(kernel='linear', C=0.5,random_state=5)

smodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=smodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""KERNEL SUPPORT VECTOR MACHINE"""





"""RANDOM FOREST"""

from sklearn.ensemble import RandomForestClassifier

rmodel=RandomForestClassifier(criterion='gini',
                             max_depth=7,
                             min_samples_split=9,
                             random_state=5)

rmodel.fit(X_train,y_train)

"""Evaluate"""

y_test_pred=rmodel.predict(X_test)
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
accuracy_score(y_test_pred,y_test)

"""EVALUATION

y_test_pred=model.predict(X_test)
"""

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

accuracy_score(y_test_pred,y_test)

cm=confusion_matrix(y_test_pred,y_test)
cm

#pd.DataFrame(cm, columns=['Predicted No','Predicted Yes'],index=['Actual No','Actual Yes'])